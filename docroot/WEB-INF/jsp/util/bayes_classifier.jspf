<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%!
public static class BayesClassifier<T, K> extends Classifier<T, K> {

	@Override
	public Classification<T, K> classify(Collection<T> features) {
		SortedSet<Classification<T, K>> probabilites =
				this.categoryProbabilities(features);

		if (probabilites.size() > 0) {
			return probabilites.last();
		}
		return null;
	}

	public Collection<Classification<T, K>> classifyDetailed(
		Collection<T> features) {

		return this.categoryProbabilities(features);
	}

	private SortedSet<Classification<T, K>> categoryProbabilities(
		Collection<T> features) {

		SortedSet<Classification<T, K>> probabilities =
				new TreeSet<Classification<T, K>>(
						new Comparator<Classification<T, K>>() {

					@Override
					public int compare(Classification<T, K> o1,
							Classification<T, K> o2) {
						int toReturn = Float.compare(
								o1.getProbability(), o2.getProbability());
						if ((toReturn == 0)
								&& !o1.getCategory().equals(o2.getCategory()))
							toReturn = -1;
						return toReturn;
					}
				});

		for (K category : this.getCategories())
			probabilities.add(new Classification<T, K>(
					features, category,
					this.categoryProbability(features, category)));
		return probabilities;
	}

	private float categoryProbability(Collection<T> features, K category) {
		return ((float) this.categoryCount(category)
					/ (float) this.getCategoriesTotal())
				* featuresProbabilityProduct(features, category);
	}

	private float featuresProbabilityProduct(Collection<T> features,
			K category) {

		float product = 1.0f;
		for (T feature : features)
			product *= this.featureWeighedAverage(feature, category);
		return product;
	}

}
%>